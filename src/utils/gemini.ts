// Gemini AI service for AstroLuna content generation

export interface GeminiGenerationConfig {
  temperature?: number;
  topK?: number;
  topP?: number;
  maxOutputTokens?: number;
}

export interface GeminiRequest {
  contents: Array<{
    parts: Array<{
      text: string;
    }>;
  }>;
  generationConfig?: GeminiGenerationConfig;
}

export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
    finishReason: string;
  }>;
}

export class GeminiService {
  private static GEMINI_API_BASE = 'https://generativelanguage.googleapis.com/v1beta';
  
  /**
   * Generate content using Gemini API
   */
  static async generateContent(
    prompt: string,
    apiKey: string,
    config?: GeminiGenerationConfig
  ): Promise<string> {
    try {
      const request: GeminiRequest = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: config?.temperature || 0.8,
          topK: config?.topK || 40,
          topP: config?.topP || 0.95,
          maxOutputTokens: config?.maxOutputTokens || 2048,
          ...config
        }
      };

      const response = await fetch(
        `${this.GEMINI_API_BASE}/models/gemini-1.5-flash:generateContent?key=${apiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(request)
        }
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Gemini API Error: ${response.status} - ${errorData.error?.message || 'Generation failed'}`);
      }

      const result: GeminiResponse = await response.json();
      
      if (!result.candidates || result.candidates.length === 0) {
        throw new Error('No content generated by Gemini');
      }

      const generatedText = result.candidates[0]?.content?.parts[0]?.text;
      
      if (!generatedText) {
        throw new Error('Empty response from Gemini');
      }

      return generatedText.trim();

    } catch (error) {
      console.error('Gemini generation error:', error);
      throw error;
    }
  }

  /**
   * Generate horoscope content for AstroScope
   */
  static async generateHoroscope(data: {
    zodiacSign?: string;
    birthDate?: string;
    birthTime?: string;
    birthPlace?: string;
    type: 'quick' | 'personalized';
    language: 'en' | 'es' | 'de';
  }, apiKey: string): Promise<{
    title: string;
    content: {
      love: string;
      career: string;
      health: string;
      personal: string;
      keyDates: Array<{
        date: string;
        description: string;
      }>;
    };
  }> {
    
    const currentMonth = new Date().toLocaleString('en-US', { month: 'long', year: 'numeric' });
    
    let prompt = '';
    
    if (data.type === 'personalized' && data.birthDate) {
      prompt = `Create a detailed personalized monthly horoscope for ${currentMonth}.

Birth Information:
- Birth Date: ${data.birthDate}
${data.birthTime ? `- Birth Time: ${data.birthTime}` : ''}
${data.birthPlace ? `- Birth Place: ${data.birthPlace}` : ''}
${data.zodiacSign ? `- Zodiac Sign: ${data.zodiacSign}` : ''}

Please provide insights for the following areas in a warm, encouraging, and mystical tone:

1. LOVE & RELATIONSHIPS: How will romantic energy flow this month? What should they focus on?
2. CAREER & FINANCES: Professional opportunities, financial guidance, and success indicators.
3. HEALTH & ENERGY: Physical wellness, mental health, and energy management advice.
4. PERSONAL GROWTH: Self-development, spiritual insights, and personal transformation.

Also include 3-4 KEY DATES this month that will be particularly significant with brief descriptions.

Format the response as a structured horoscope reading that feels personal and insightful.`;

    } else {
      const sign = data.zodiacSign || 'Unknown';
      prompt = `Create a monthly horoscope for ${sign} for ${currentMonth}.

Please provide insights for the following areas in a warm, encouraging, and mystical tone:

1. LOVE & RELATIONSHIPS: Romantic prospects and relationship guidance for ${sign}.
2. CAREER & FINANCES: Professional opportunities and financial outlook for ${sign}.
3. HEALTH & ENERGY: Wellness advice and energy management for ${sign}.
4. PERSONAL GROWTH: Self-development and spiritual guidance for ${sign}.

Also include 3-4 KEY DATES this month that will be particularly favorable for ${sign}.

Write in an engaging, mystical style that ${sign} individuals will connect with.`;
    }

    // Add language instruction
    const languageInstructions = {
      en: 'Write the horoscope in English.',
      es: 'Escribe el horóscopo en español.',
      de: 'Schreibe das Horoskop auf Deutsch.'
    };
    
    prompt += `\n\n${languageInstructions[data.language]}`;

    const generatedContent = await this.generateContent(prompt, apiKey, {
      temperature: 0.8,
      maxOutputTokens: 2048
    });

    // Parse the generated content into structured format
    return this.parseHoroscopeContent(generatedContent, data.zodiacSign, currentMonth);
  }

  /**
   * Generate Tarot reading for TarotPath
   */
  static async generateTarotReading(data: {
    name: string;
    birthDate: string;
    language: 'en' | 'es' | 'de';
  }, apiKey: string): Promise<{
    title: string;
    cards: Array<{
      name: string;
      position: string;
      interpretation: string;
      imagery: string;
    }>;
    overall: string;
  }> {
    
    const currentMonth = new Date().toLocaleString('en-US', { month: 'long', year: 'numeric' });
    
    const prompt = `Create a mystical Tarot reading for ${data.name} (born ${data.birthDate}) for ${currentMonth}.

Generate a 5-card spread with the following positions:
1. PAST INFLUENCES - What energies from the past are affecting them now
2. PRESENT SITUATION - Current life circumstances and challenges  
3. HIDDEN INFLUENCES - Subconscious factors and unseen energies
4. FUTURE POTENTIAL - What they're moving toward this month
5. GUIDANCE - Advice and wisdom for their path forward

For each card, provide:
- Card name (choose from traditional Tarot deck)
- Position meaning
- Detailed interpretation for ${data.name}'s specific situation
- Brief description of the card's imagery and symbolism

End with an OVERALL MESSAGE that ties all the cards together into cohesive guidance.

Use mystical, intuitive language that feels personal and insightful. Make the reading feel authentic and meaningful.

Language: ${data.language === 'en' ? 'English' : data.language === 'es' ? 'Spanish' : 'German'}`;

    const generatedContent = await this.generateContent(prompt, apiKey, {
      temperature: 0.9,
      maxOutputTokens: 2048
    });

    return this.parseTarotContent(generatedContent, data.name, currentMonth);
  }

  /**
   * Generate Zodiac information for ZodiacTome
   */
  static async generateZodiacInfo(data: {
    zodiacSign: string;
    analysisType: 'compatibility' | 'insights';
    targetSign?: string; // For compatibility analysis
    language: 'en' | 'es' | 'de';
  }, apiKey: string): Promise<any> {
    
    let prompt = '';
    
    if (data.analysisType === 'compatibility' && data.targetSign) {
      prompt = `Create a detailed compatibility analysis between ${data.zodiacSign} and ${data.targetSign}.

Analyze the following aspects:
1. ROMANTIC COMPATIBILITY - How these signs connect in love relationships
2. FRIENDSHIP POTENTIAL - Their dynamics as friends and companions  
3. COMMUNICATION STYLE - How they express themselves to each other
4. CHALLENGES & GROWTH - Potential conflicts and how to overcome them
5. STRENGTHS TOGETHER - What makes this pairing powerful
6. ADVICE - Practical tips for building a strong relationship

Provide a compatibility score (1-100) and explain the reasoning.

Use an insightful, balanced tone that acknowledges both strengths and challenges.`;

    } else {
      prompt = `Create comprehensive AI insights for the zodiac sign ${data.zodiacSign}.

Provide detailed analysis for:
1. CAREER & PROFESSIONAL LIFE - Natural talents, ideal careers, workplace behavior
2. LOVE & RELATIONSHIPS - Romantic tendencies, what they seek in partners, relationship patterns
3. HEALTH & WELLNESS - Physical tendencies, stress patterns, wellness advice
4. SPIRITUAL GROWTH - Higher purpose, spiritual lessons, personal development path
5. HIDDEN STRENGTHS - Lesser-known positive traits and untapped potential
6. SHADOW ASPECTS - Areas for growth and self-awareness

Write with depth and nuance, going beyond typical zodiac descriptions to provide truly insightful guidance.`;
    }

    // Add language instruction
    const languageInstructions = {
      en: 'Write in English.',
      es: 'Escribe en español.',
      de: 'Schreibe auf Deutsch.'
    };
    
    prompt += `\n\n${languageInstructions[data.language]}`;

    const generatedContent = await this.generateContent(prompt, apiKey, {
      temperature: 0.7,
      maxOutputTokens: 2048
    });

    return this.parseZodiacContent(generatedContent, data);
  }

  /**
   * Parse horoscope content into structured format
   */
  private static parseHoroscopeContent(content: string, zodiacSign?: string, month?: string) {
    // This is a simplified parser - in production, you might want more sophisticated parsing
    const title = `Monthly Horoscope${zodiacSign ? ` for ${zodiacSign}` : ''} - ${month}`;
    
    // Extract sections using simple text parsing
    const sections = content.split(/(?:LOVE|CAREER|HEALTH|PERSONAL|KEY DATES?)/i);
    
    return {
      title,
      content: {
        love: sections[1]?.trim() || 'Love energies are flowing positively this month.',
        career: sections[2]?.trim() || 'Professional opportunities await your attention.',
        health: sections[3]?.trim() || 'Focus on maintaining balance in all areas of life.',
        personal: sections[4]?.trim() || 'Personal growth opportunities are highlighted.',
        keyDates: this.extractKeyDates(content)
      }
    };
  }

  /**
   * Parse tarot content into structured format
   */
  private static parseTarotContent(content: string, name: string, month: string) {
    const title = `Tarot Reading for ${name} - ${month}`;
    
    // Simple parsing - extract card information
    const cardSections = content.split(/\d+\./);
    const cards = [];
    
    const positions = ['Past Influences', 'Present Situation', 'Hidden Influences', 'Future Potential', 'Guidance'];
    
    for (let i = 1; i < Math.min(cardSections.length, 6); i++) {
      const section = cardSections[i];
      const cardName = this.extractCardName(section);
      
      cards.push({
        name: cardName,
        position: positions[i - 1] || `Position ${i}`,
        interpretation: section.trim(),
        imagery: 'A mystically charged card revealing deep insights into your journey.'
      });
    }

    const overall = this.extractOverallMessage(content);
    
    return {
      title,
      cards,
      overall
    };
  }

  /**
   * Parse zodiac content into structured format  
   */
  private static parseZodiacContent(content: string, data: any) {
    if (data.analysisType === 'compatibility') {
      return {
        compatibility: {
          score: this.extractCompatibilityScore(content),
          analysis: content,
          strengths: [],
          challenges: [],
          advice: ''
        }
      };
    } else {
      return {
        insights: {
          career: '',
          love: '', 
          health: '',
          spiritual: '',
          strengths: [],
          growth_areas: [],
          full_analysis: content
        }
      };
    }
  }

  // Helper methods for parsing
  private static extractKeyDates(content: string) {
    const dates = [];
    const dateMatches = content.match(/(\d{1,2}(?:st|nd|rd|th)?)\s*(?:of\s*)?(\w+)/g);
    
    if (dateMatches) {
      for (let i = 0; i < Math.min(dateMatches.length, 4); i++) {
        dates.push({
          date: dateMatches[i],
          description: 'A day of special significance and opportunity.'
        });
      }
    }
    
    return dates;
  }

  private static extractCardName(section: string): string {
    // Look for card names in the section
    const cardNames = [
      'The Fool', 'The Magician', 'The High Priestess', 'The Empress', 'The Emperor',
      'The Hierophant', 'The Lovers', 'The Chariot', 'Strength', 'The Hermit',
      'Wheel of Fortune', 'Justice', 'The Hanged Man', 'Death', 'Temperance',
      'The Devil', 'The Tower', 'The Star', 'The Moon', 'The Sun', 'Judgement', 'The World'
    ];
    
    for (const cardName of cardNames) {
      if (section.toLowerCase().includes(cardName.toLowerCase())) {
        return cardName;
      }
    }
    
    return 'The Star'; // Default fallback card
  }

  private static extractOverallMessage(content: string): string {
    const overallMatch = content.match(/(?:OVERALL|SUMMARY|GUIDANCE)[\s:]*(.+?)$/si);
    return overallMatch?.[1]?.trim() || 'Trust in your inner wisdom and embrace the journey ahead.';
  }

  private static extractCompatibilityScore(content: string): number {
    const scoreMatch = content.match(/(?:score|rating)[\s:]*(\d+)/i);
    return scoreMatch ? parseInt(scoreMatch[1]) : 75; // Default score
  }
}