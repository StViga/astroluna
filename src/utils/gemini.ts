// Gemini AI service for AstroLuna content generation

export interface GeminiGenerationConfig {
  temperature?: number;
  topK?: number;
  topP?: number;
  maxOutputTokens?: number;
}

export interface GeminiRequest {
  contents: Array<{
    parts: Array<{
      text: string;
    }>;
  }>;
  generationConfig?: GeminiGenerationConfig;
}

export interface GeminiResponse {
  candidates: Array<{
    content: {
      parts: Array<{
        text: string;
      }>;
    };
    finishReason: string;
  }>;
}

export class GeminiService {
  private static GEMINI_API_BASE = 'https://generativelanguage.googleapis.com/v1';
  
  /**
   * Generate content using Gemini API
   */
  static async generateContent(
    prompt: string,
    apiKey: string,
    config?: GeminiGenerationConfig
  ): Promise<string> {
    try {
      const request: GeminiRequest = {
        contents: [{
          parts: [{
            text: prompt
          }]
        }],
        generationConfig: {
          temperature: config?.temperature || 0.8,
          topK: config?.topK || 40,
          topP: config?.topP || 0.95,
          maxOutputTokens: config?.maxOutputTokens || 2048,
          ...config
        }
      };

      const response = await fetch(
        `${this.GEMINI_API_BASE}/models/gemini-2.0-flash:generateContent?key=${apiKey}`,
        {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(request)
        }
      );

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Gemini API Error: ${response.status} - ${errorData.error?.message || 'Generation failed'}`);
      }

      const result: GeminiResponse = await response.json();
      
      if (!result.candidates || result.candidates.length === 0) {
        throw new Error('No content generated by Gemini');
      }

      const generatedText = result.candidates[0]?.content?.parts[0]?.text;
      
      if (!generatedText) {
        throw new Error('Empty response from Gemini');
      }

      return generatedText.trim();

    } catch (error) {
      console.error('Gemini generation error:', error);
      throw error;
    }
  }

  /**
   * Generate horoscope content for AstroScope
   */
  static async generateHoroscope(data: {
    zodiacSign?: string;
    birthDate?: string;
    birthTime?: string;
    birthPlace?: string;
    type: 'quick' | 'personalized';
    language: 'en' | 'es' | 'de';
  }, apiKey: string): Promise<{
    title: string;
    content: {
      love: string;
      career: string;
      health: string;
      personal: string;
      keyDates: Array<{
        date: string;
        description: string;
      }>;
    };
  }> {
    
    const currentMonth = new Date().toLocaleString('en-US', { month: 'long', year: 'numeric' });
    
    let prompt = '';
    
    if (data.type === 'personalized' && data.birthDate) {
      prompt = `Create a detailed personalized monthly horoscope for ${currentMonth}.

Birth Information:
- Birth Date: ${data.birthDate}
${data.birthTime ? `- Birth Time: ${data.birthTime}` : ''}
${data.birthPlace ? `- Birth Place: ${data.birthPlace}` : ''}
${data.zodiacSign ? `- Zodiac Sign: ${data.zodiacSign}` : ''}

Please provide insights for the following areas in a warm, encouraging, and mystical tone:

1. LOVE & RELATIONSHIPS: How will romantic energy flow this month? What should they focus on?
2. CAREER & FINANCES: Professional opportunities, financial guidance, and success indicators.
3. HEALTH & ENERGY: Physical wellness, mental health, and energy management advice.
4. PERSONAL GROWTH: Self-development, spiritual insights, and personal transformation.

Also include 3-4 KEY DATES this month that will be particularly significant with brief descriptions.

Format the response as a structured horoscope reading that feels personal and insightful.`;

    } else {
      const sign = data.zodiacSign || 'Unknown';
      prompt = `Create a monthly horoscope for ${sign} for ${currentMonth}.

Please provide insights for the following areas in a warm, encouraging, and mystical tone:

1. LOVE & RELATIONSHIPS: Romantic prospects and relationship guidance for ${sign}.
2. CAREER & FINANCES: Professional opportunities and financial outlook for ${sign}.
3. HEALTH & ENERGY: Wellness advice and energy management for ${sign}.
4. PERSONAL GROWTH: Self-development and spiritual guidance for ${sign}.

Also include 3-4 KEY DATES this month that will be particularly favorable for ${sign}.

Write in an engaging, mystical style that ${sign} individuals will connect with.`;
    }

    // Add language instruction
    const languageInstructions = {
      en: 'Write the horoscope in English.',
      es: 'Escribe el horóscopo en español.',
      de: 'Schreibe das Horoskop auf Deutsch.'
    };
    
    prompt += `\n\n${languageInstructions[data.language]}`;

    const generatedContent = await this.generateContent(prompt, apiKey, {
      temperature: 0.8,
      maxOutputTokens: 2048
    });

    // Parse the generated content into structured format
    return this.parseHoroscopeContent(generatedContent, data.zodiacSign, currentMonth);
  }

  /**
   * Generate Tarot reading for TarotPath
   */
  static async generateTarotReading(data: {
    question: string;
    reading_type: string;
    spread_type: string;
    selected_cards: number[];
    language: 'en' | 'es' | 'de';
  }, apiKey: string): Promise<{
    title: string;
    cards: Array<{
      name: string;
      position: string;
      interpretation: string;
      imagery: string;
    }>;
    overall: string;
  }> {
    
    const currentMonth = new Date().toLocaleString('en-US', { month: 'long', year: 'numeric' });
    
    // Map card numbers to actual tarot cards (using selected_cards)
    const majorArcana = [
      'The Fool', 'The Magician', 'The High Priestess', 'The Empress', 'The Emperor',
      'The Hierophant', 'The Lovers', 'The Chariot', 'Strength', 'The Hermit',
      'Wheel of Fortune', 'Justice', 'The Hanged Man', 'Death', 'Temperance',
      'The Devil', 'The Tower', 'The Star', 'The Moon', 'The Sun', 'Judgement', 'The World'
    ];
    
    const minorArcana = [
      // Cups
      'Ace of Cups', 'Two of Cups', 'Three of Cups', 'Four of Cups', 'Five of Cups',
      'Six of Cups', 'Seven of Cups', 'Eight of Cups', 'Nine of Cups', 'Ten of Cups',
      'Page of Cups', 'Knight of Cups', 'Queen of Cups', 'King of Cups',
      // Swords  
      'Ace of Swords', 'Two of Swords', 'Three of Swords', 'Four of Swords', 'Five of Swords',
      'Six of Swords', 'Seven of Swords', 'Eight of Swords', 'Nine of Swords', 'Ten of Swords',
      'Page of Swords', 'Knight of Swords', 'Queen of Swords', 'King of Swords',
      // Wands
      'Ace of Wands', 'Two of Wands', 'Three of Wands', 'Four of Wands', 'Five of Wands',
      'Six of Wands', 'Seven of Wands', 'Eight of Wands', 'Nine of Wands', 'Ten of Wands',
      'Page of Wands', 'Knight of Wands', 'Queen of Wands', 'King of Wands',
      // Pentacles
      'Ace of Pentacles', 'Two of Pentacles', 'Three of Pentacles', 'Four of Pentacles', 'Five of Pentacles',
      'Six of Pentacles', 'Seven of Pentacles', 'Eight of Pentacles', 'Nine of Pentacles', 'Ten of Pentacles',
      'Page of Pentacles', 'Knight of Pentacles', 'Queen of Pentacles', 'King of Pentacles'
    ];
    
    const allCards = [...majorArcana, ...minorArcana];
    
    // Get the selected cards by their indices
    const selectedCardNames = data.selected_cards.map((cardIndex, position) => {
      const cardName = allCards[cardIndex % allCards.length] || `Unknown Card ${cardIndex}`;
      return { cardName, position: position + 1 };
    });
    
    // Define spread positions based on spread_type
    const spreadPositions = {
      'lunar_path': [
        'Past Influences',
        'Present Situation', 
        'Hidden Influences',
        'Future Potential',
        'Guidance & Wisdom'
      ],
      'celtic_cross': [
        'Current Situation',
        'Challenge/Cross',
        'Distant Past/Foundation',
        'Recent Past',
        'Possible Future'
      ],
      'three_card': [
        'Past',
        'Present',
        'Future',
        'Advice',
        'Outcome'
      ]
    };
    
    const positions = spreadPositions[data.spread_type] || spreadPositions['lunar_path'];
    
    const cardList = selectedCardNames.map((card, index) => 
      `${index + 1}. ${positions[index]}: ${card.cardName}`
    ).join('\n');
    
    const prompt = `Create a mystical Tarot reading for the question: "${data.question}"

The reading type is: ${data.reading_type}
Spread layout: ${data.spread_type}

Selected cards for this reading:
${cardList}

For each of the 5 cards, provide:
- Position meaning and relevance to the question
- Detailed interpretation of how this specific card answers their question
- Brief description of the card's imagery and symbolism
- Personal guidance based on this card's message

End with an OVERALL MESSAGE that weaves all the cards together into cohesive wisdom for their question: "${data.question}"

Use mystical, intuitive language that feels personal and insightful. Make the reading feel authentic and meaningful, directly addressing their specific question.

Language: ${data.language === 'en' ? 'English' : data.language === 'es' ? 'Spanish' : 'German'}`;

    const generatedContent = await this.generateContent(prompt, apiKey, {
      temperature: 0.9,
      maxOutputTokens: 2048
    });

    return this.parseTarotContent(generatedContent, data.question, currentMonth);
  }

  /**
   * Generate Zodiac information for ZodiacTome
   */
  static async generateZodiacInfo(data: {
    zodiacSign: string;
    analysisType: 'compatibility' | 'insights';
    targetSign?: string; // For compatibility analysis
    language: 'en' | 'es' | 'de';
  }, apiKey: string): Promise<any> {
    
    let prompt = '';
    
    if (data.analysisType === 'compatibility' && data.targetSign) {
      prompt = `Create a detailed compatibility analysis between ${data.zodiacSign} and ${data.targetSign}.

Analyze the following aspects:
1. ROMANTIC COMPATIBILITY - How these signs connect in love relationships
2. FRIENDSHIP POTENTIAL - Their dynamics as friends and companions  
3. COMMUNICATION STYLE - How they express themselves to each other
4. CHALLENGES & GROWTH - Potential conflicts and how to overcome them
5. STRENGTHS TOGETHER - What makes this pairing powerful
6. ADVICE - Practical tips for building a strong relationship

Provide a compatibility score (1-100) and explain the reasoning.

Use an insightful, balanced tone that acknowledges both strengths and challenges.`;

    } else {
      prompt = `Create comprehensive AI insights for the zodiac sign ${data.zodiacSign}.

Provide detailed analysis for:
1. CAREER & PROFESSIONAL LIFE - Natural talents, ideal careers, workplace behavior
2. LOVE & RELATIONSHIPS - Romantic tendencies, what they seek in partners, relationship patterns
3. HEALTH & WELLNESS - Physical tendencies, stress patterns, wellness advice
4. SPIRITUAL GROWTH - Higher purpose, spiritual lessons, personal development path
5. HIDDEN STRENGTHS - Lesser-known positive traits and untapped potential
6. SHADOW ASPECTS - Areas for growth and self-awareness

Write with depth and nuance, going beyond typical zodiac descriptions to provide truly insightful guidance.`;
    }

    // Add language instruction
    const languageInstructions = {
      en: 'Write in English.',
      es: 'Escribe en español.',
      de: 'Schreibe auf Deutsch.'
    };
    
    prompt += `\n\n${languageInstructions[data.language]}`;

    const generatedContent = await this.generateContent(prompt, apiKey, {
      temperature: 0.7,
      maxOutputTokens: 2048
    });

    return this.parseZodiacContent(generatedContent, data);
  }

  /**
   * Parse horoscope content into structured format
   */
  private static parseHoroscopeContent(content: string, zodiacSign?: string, month?: string) {
    const title = `Monthly Horoscope${zodiacSign ? ` for ${zodiacSign}` : ''} - ${month}`;
    
    // Enhanced parsing to extract content sections more reliably
    let love = '';
    let career = '';
    let health = '';
    let personal = '';
    
    // Try multiple parsing approaches
    // Approach 1: Look for numbered sections
    const numberedMatches = content.match(/(\d+\.\s*[^:]+:\s*[^1-9]+?)(?=\d+\.|$)/g);
    if (numberedMatches && numberedMatches.length >= 4) {
      love = this.cleanSectionText(numberedMatches[0]);
      career = this.cleanSectionText(numberedMatches[1]);
      health = this.cleanSectionText(numberedMatches[2]);
      personal = this.cleanSectionText(numberedMatches[3]);
    } else {
      // Approach 2: Look for section headers
      const loveMatch = content.match(/(?:LOVE|RELATIONSHIPS?)[\s&:]*([^]*?)(?=(?:CAREER|FINANCE|HEALTH|PERSONAL|$))/i);
      const careerMatch = content.match(/(?:CAREER|FINANCE)[\s&:]*([^]*?)(?=(?:HEALTH|PERSONAL|LOVE|$))/i);
      const healthMatch = content.match(/(?:HEALTH|ENERGY|WELLNESS)[\s&:]*([^]*?)(?=(?:PERSONAL|CAREER|LOVE|$))/i);
      const personalMatch = content.match(/(?:PERSONAL|GROWTH|SPIRITUAL)[\s&:]*([^]*?)(?=(?:KEY DATES?|CAREER|LOVE|HEALTH|$))/i);
      
      love = this.cleanSectionText(loveMatch?.[1]) || 'Love energies are flowing positively this month.';
      career = this.cleanSectionText(careerMatch?.[1]) || 'Professional opportunities await your attention.';
      health = this.cleanSectionText(healthMatch?.[1]) || 'Focus on maintaining balance in all areas of life.';
      personal = this.cleanSectionText(personalMatch?.[1]) || 'Personal growth opportunities are highlighted.';
    }
    
    // If all sections are empty, use the full content as personal insight
    if (!love && !career && !health && !personal) {
      personal = this.cleanSectionText(content);
    }
    
    return {
      title,
      content: {
        love: love || 'Love energies are flowing positively this month.',
        career: career || 'Professional opportunities await your attention.',
        health: health || 'Focus on maintaining balance in all areas of life.',
        personal: personal || 'Personal growth opportunities are highlighted.',
        keyDates: this.extractKeyDates(content)
      }
    };
  }

  /**
   * Clean and format section text
   */
  private static cleanSectionText(text?: string): string {
    if (!text) return '';
    
    return text
      .trim()
      .replace(/^\d+\.\s*[^:]+:\s*/, '') // Remove "1. LOVE & RELATIONSHIPS:" type headers
      .replace(/\*\*/g, '') // Remove markdown bold markers
      .replace(/^\s*[-*]\s*/gm, '') // Remove bullet points
      .replace(/\n\s*\n/g, '\n\n') // Normalize paragraph breaks
      .substring(0, 500) // Limit length to prevent overflow
      .trim();
  }

  /**
   * Parse tarot content into structured format
   */
  private static parseTarotContent(content: string, question: string, month: string) {
    const title = `Tarot Reading: "${question}" - ${month}`;
    
    // Simple parsing - extract card information
    const cardSections = content.split(/\d+\./);
    const cards = [];
    
    const positions = ['Past Influences', 'Present Situation', 'Hidden Influences', 'Future Potential', 'Guidance'];
    
    for (let i = 1; i < Math.min(cardSections.length, 6); i++) {
      const section = cardSections[i];
      const cardName = this.extractCardName(section);
      
      cards.push({
        name: cardName,
        position: positions[i - 1] || `Position ${i}`,
        interpretation: section.trim(),
        imagery: 'A mystically charged card revealing deep insights into your journey.'
      });
    }

    const overall = this.extractOverallMessage(content);
    
    return {
      title,
      cards,
      overall
    };
  }

  /**
   * Parse zodiac content into structured format  
   */
  private static parseZodiacContent(content: string, data: any) {
    if (data.analysisType === 'compatibility') {
      return {
        compatibility: {
          score: this.extractCompatibilityScore(content),
          analysis: content,
          strengths: [],
          challenges: [],
          advice: ''
        }
      };
    } else {
      return {
        insights: {
          career: '',
          love: '', 
          health: '',
          spiritual: '',
          strengths: [],
          growth_areas: [],
          full_analysis: content
        }
      };
    }
  }

  // Helper methods for parsing
  private static extractKeyDates(content: string) {
    const dates = [];
    
    // Try to find date patterns in the content
    const patterns = [
      /(\d{1,2}(?:st|nd|rd|th)?)\s*(?:of\s*)?(\w+)/g,
      /(\d{1,2})(?:[-\/])(\d{1,2})/g,
      /(\w+)\s*(\d{1,2}(?:st|nd|rd|th)?)/g
    ];
    
    for (const pattern of patterns) {
      const matches = [...content.matchAll(pattern)];
      if (matches.length > 0) {
        for (let i = 0; i < Math.min(matches.length, 4); i++) {
          dates.push({
            date: matches[i][0],
            description: 'A day of special significance and opportunity.'
          });
        }
        break;
      }
    }
    
    // If no dates found, generate some generic ones for the current month
    if (dates.length === 0) {
      const currentYear = new Date().getFullYear();
      const currentMonth = new Date().getMonth() + 1;
      
      dates.push(
        { date: `${currentYear}-${String(currentMonth).padStart(2, '0')}-05`, description: 'A day for new beginnings and fresh energy.' },
        { date: `${currentYear}-${String(currentMonth).padStart(2, '0')}-12`, description: 'A powerful day for manifestation and goal setting.' },
        { date: `${currentYear}-${String(currentMonth).padStart(2, '0')}-18`, description: 'Ideal time for important conversations and connections.' },
        { date: `${currentYear}-${String(currentMonth).padStart(2, '0')}-25`, description: 'A harmonious day for creativity and inspiration.' }
      );
    }
    
    return dates;
  }

  private static extractCardName(section: string): string {
    // Look for card names in the section
    const cardNames = [
      'The Fool', 'The Magician', 'The High Priestess', 'The Empress', 'The Emperor',
      'The Hierophant', 'The Lovers', 'The Chariot', 'Strength', 'The Hermit',
      'Wheel of Fortune', 'Justice', 'The Hanged Man', 'Death', 'Temperance',
      'The Devil', 'The Tower', 'The Star', 'The Moon', 'The Sun', 'Judgement', 'The World'
    ];
    
    for (const cardName of cardNames) {
      if (section.toLowerCase().includes(cardName.toLowerCase())) {
        return cardName;
      }
    }
    
    return 'The Star'; // Default fallback card
  }

  private static extractOverallMessage(content: string): string {
    const overallMatch = content.match(/(?:OVERALL|SUMMARY|GUIDANCE)[\s:]*(.+?)$/si);
    return overallMatch?.[1]?.trim() || 'Trust in your inner wisdom and embrace the journey ahead.';
  }

  private static extractCompatibilityScore(content: string): number {
    const scoreMatch = content.match(/(?:score|rating)[\s:]*(\d+)/i);
    return scoreMatch ? parseInt(scoreMatch[1]) : 75; // Default score
  }
}